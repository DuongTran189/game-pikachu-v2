{"version":3,"sources":["routes/CONSTANTS.ts","types/game.ts","recoil/atoms/gameSoundState.ts","hooks/useLocalStorage.ts","services/i18n.ts","hooks/useAsync.ts","components/SwitchLanguage.tsx","recoil/atoms/playerState.ts","pages/MainPage.tsx","api/CONSTANTS.ts","api/ranking.ts","utils/time.ts","components/Rank/TopList.tsx","components/RankBoard.tsx","recoil/atoms/gameState.ts","utils/game.ts","recoil/atoms/gameOverlayState.ts","recoil/atoms/selectedPokemonsState.ts","recoil/selectors/selectedPokemonsSelector.ts","recoil/atoms/gameTimingState.ts","hooks/useGameActions.ts","pages/SinglePlayerPage.tsx","types/chat.ts","recoil/atoms/messagesState.ts","components/Chat/Message.tsx","components/Chat/MessagesBox.tsx","components/ChatRoom.tsx","pages/MultiPlayerPage.tsx","components/Game/PokemonCard.tsx","components/Game/PokemonRow.tsx","hooks/useGameEngine.ts","components/GameBoard.tsx","components/Game/LineCard.tsx","components/Game/LineRow.tsx","components/GameOverlay.tsx","hooks/useGameOverlayEngine.ts","components/Game/GameSpeedInfo.tsx","pages/SpeedModePage.tsx","components/Game/GameSurvivalInfo.tsx","pages/SurvivalModePage.tsx","pages/PlayerPage.tsx","App.tsx","hooks/usePlaySound.ts","reportWebVitals.ts","assets/sound/menu-open.mp3","assets/sound/disable-sound.mp3","assets/sound/enable-sound.mp3","assets/sound/switch-on.mp3","assets/sound/switch-off.mp3","assets/sound/bite.mp3","assets/sound/fanfare.mp3","assets/sound/glug-a.mp3","assets/sound/rising-pops.mp3","assets/sound/game-completion.wav","assets/sound/gamers-fail-game.mp3","assets/sound/time-limited.wav","assets/sound/levelup.mp3","assets/sound/pop-down.mp3","assets/sound/pop-up-on.mp3","assets/sound/pop-up-off.mp3","assets/sound/you-win.mp3","components/SoundProvider.tsx","index.tsx"],"names":["Routes","GameSelector","GameMode","GameTypeState","GameStatus","Direction","PointType","GameLevel","gameOptions","LEVEL_1","row","col","LEVEL_2","LEVEL_3","LEVEL_4","LEVEL_5","LEVEL_6","LEVEL_7","LEVEL_8","LEVEL_9","LEVEL_10","LEVEL_11","LEVEL_12","LEVEL_13","LEVEL_14","nextLevel","gameSoundState","atom","key","GAME_SOUND_STATE","default","soundReady","playOpenMenuSound","playEnableSound","playDisableSound","playCompletedGameSound","playFailedGameSound","playBiteSound","playRisingPopSound","playFanfareSound","playGlugSound","playNearlyEndTimeSound","playOffSound","playOnSound","playLevelUpSound","playPopDownSound","playPopUpOnSound","playPopUpOffSound","playYouWinSound","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","i18n","use","initReactI18next","init","resources","en","translation","English","Vietnamese","Back","Replay","Language","Level","Welcome","Congratulations","vi","lng","fallbackLng","interpolation","escapeValue","ResponseStatus","SwitchLanguage","t","useTranslation","useRecoilValue","setStorageValue","changeLanguage","className","onClick","playerState","PLAYER_STATE","rankingId","playerName","playerTiming","MainPage","Helmet","charSet","to","SINGLE_PLAYER_PAGE","MULTI_PLAYER_PAGE","BASE_API","defaultFetchOptions","method","mode","cache","credentials","headers","redirect","referrerPolicy","getTopRanking","fetch","then","res","json","response","useAsync","asyncFunction","immediate","IDLE","status","setStatus","setValue","setError","execute","useCallback","PENDING","SUCCESS","catch","ERROR","useEffect","timeConvert","num","minutes","Math","floor","toString","padStart","dateTimeFromTimestamp","timestamp","Date","toLocaleString","TopList","topPlayersResponse","data","SPEED_MODE","SPEED_MODE_PAGE","style","width","margin","SURVIVAL_MODE_PAGE","map","player","index","timing","RankBoard","SURVIVAL_MODE","memo","gameState","GAME_STATE","pokemons","matrix","level","BASE_URL","pokemonList","id","matched","image","shufflePokemonList","nonShuffleList","shuffledPokemonList","sort","random","shuffledlistPokemon","pokemon","nid","nanoid","reShufflePokemonList","arrayPokemons","objectList","arrayList","Object","keys","push","convertObjectToArrayList","generatePokemonMatrix","rowSetting","colSetting","newPokemons","totalCol","totalRow","pokemonKeys","pokemonMatrix","undefined","borderPoint","pokemonKey","pop","rowIndex","colIndex","hasConnectLine","point1","point2","pathPoints","fromPoint","toPoint","matrixTotalRow","matrixTotalCol","tempMatrix","newMatrix","length","i","slice","cloneMatrix","matrixPoints","matrixTrackingPoints","dRow","dCol","queue","currentPoint","shift","trackedPoints","trackPoint","findPath","connected","checkPointInLine","connectingLinePoints","currentPosition","find","matchingLinePoint","checkConnectionSelectedPokemons","selectedPokemons","newSelectedPokemons","selectedPokemon1","selectedPokemon2","limitRow","limitCol","reduce","newPathPoints","arrayPoints","type","LINE","direction","prevIndex","END","prevPoint","TOP","BOTTOM","LEFT","RIGHT","extraPoint","START","newCurrentPoint","drawPath","gameOverlayState","GAME_OVERLAY_STATE","selectedPokemonsState","SELECTED_POKEMONS","selectedPokemonsSelector","selector","SELECTED_POKEMONS_SELECTOR","get","set","newValue","cloneSelectedPokemons","gameTimingState","GAME_TIMING_STATE","yourTiming","useGameActions","setGame","useSetRecoilState","setPlayer","setGameTiming","setSelectedPokemons","resetGameState","useResetRecoilState","resetGameOverlayState","resetSelectedPokemonsState","initGame","total","slicePokemonList","nonShufflePokemonList","makeListPokemons","RUNNING","currentPlayer","addNewRankingScore","fetchOptions","body","addNewRanking","now","prevPlayer","replayGame","endGame","prevGame","COMPLETED","selectPokemon","pokemonId","resetGame","updateNewRankingScore","updateNewRanking","ChatTypeState","SinglePlayerPage","MAIN_PAGE","messagesState","MESSAGES_STATE","messages","Message","message","name","content","selfClass","isOldMessage","prevProps","nextProps","MessagesBox","messagesBox","document","getElementById","scrollTo","behavior","top","scrollHeight","ChatRoom","room","setMessagesState","socketUrl","useWebSocket","sendJsonMessage","readyState","lastJsonMessage","lastMessage","handleClickSendMessage","messageJson","command","channel","ReadyState","OPEN","onSubmit","event","preventDefault","inputMessage","currentTarget","setAttribute","replace","trim","alert","removeAttribute","focus","placeholder","autoFocus","MultiPlayerPage","showInDevelopment","PokemonCard","isSelected","selected","hidden","backgroundImage","propsAreEquals","PokemonRow","findIndex","useGameEngine","location","useLocation","entries","checkCompletedLevel","levelUp","foundConnectLine","entriesPokemons","entryPokemon","currentPokemon","some","hasAnyConnectLine","newShufflePokemons","shuffleMatrix","GameBoard","LineCard","point","pointClass","lineRef","useRef","setTimeout","current","classList","remove","ref","LineRow","cards","_","GameOverlay","gameTiming","useGameOverlayEngine","columnCards","Array","fill","GameSpeedInfo","useRecoilState","timeoutId","clearTimeout","SpeedModePage","GameSurvivalInfo","SurvivalModePage","PlayerPage","history","useHistory","setPlayerName","match","maxLength","App","Sound","language","prevPlayerName","PLAYER_PAGE","path","exact","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","usePlaySound","sound","soundPath","menuOpenSound","BITE","biteSound","COMPLETE_GAME","completeGameSound","DISABLE","disableSound","ENABLE","enableSound","ON","onSound","OFF","offSound","FAIL_GAME","failedGameSound","GLUG","glugSound","FANFARE","fanfareSound","RISING_POP","risingPopSound","NEARLY_END_TIME","nearlyEndTimeSound","LEVEL_UP","levelUpSound","POP_DOWN","popDownSound","POP_UP_ON","popUpOnSound","POP_UP_OFF","popUpOffSound","YOU_WIN","youWinSound","useSound","interrupt","play","playSound","loadedSound","stopSound","stop","pauseSound","pause","duration","SoundProvider","children","loadedOpenMenuSound","loadedCompletedGameSound","loadedFailedGameSound","loadedBiteSound","loadedDisableSound","loadedEnableSound","loadedOnSound","loadedOffSound","loadedFanfareSound","loadedGlugSound","loadedNearlyEndTimeSound","loadedRisingPopSound","loadedPopDownSound","loadedPopUpOnSound","loadedPopUpOffSound","loadedLevelUpSound","loadedYouWinSound","setSounds","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9f738735.chunk.js","sourcesContent":["export enum Routes {\n  MAIN_PAGE = \"/\",\n  PLAYER_PAGE = \"/player\",\n  SINGLE_PLAYER_PAGE = \"/single-player\",\n  MULTI_PLAYER_PAGE = \"/multi-player\",\n  SURVIVAL_MODE_PAGE = \"/survival-mode\",\n  SPEED_MODE_PAGE = \"/speed-mode\",\n}\n","export enum GameSelector {\n  SELECTED_POKEMONS_SELECTOR = \"SELECTED_POKEMONS_SELECTOR\",\n}\n\nexport interface PlayerState {\n  rankingId?: string;\n  playerName: string;\n  playerTiming: number;\n}\n\nexport interface Pokemon {\n  id: string;\n  matched: boolean;\n  nid?: string;\n  image?: string;\n  rowIndex?: number;\n  colIndex?: number;\n}\n\nexport enum GameMode {\n  SURVIVAL_MODE = \"survival\",\n  SPEED_MODE = \"speed\",\n}\n\nexport interface GameSound {\n  soundReady: boolean;\n  playOpenMenuSound: Function;\n  playDisableSound: Function;\n  playEnableSound: Function;\n  playCompletedGameSound: Function;\n  playFailedGameSound: Function;\n  playBiteSound: Function;\n  playOnSound: Function;\n  playOffSound: Function;\n  playGlugSound: Function;\n  playFanfareSound: Function;\n  playRisingPopSound: Function;\n  playNearlyEndTimeSound: Function;\n  playLevelUpSound: Function;\n  playPopUpOnSound: Function;\n  playPopUpOffSound: Function;\n  playPopDownSound: Function;\n  playYouWinSound: Function;\n}\n\nexport enum GameTypeState {\n  PLAYER_STATE = \"PLAYER_STATE\",\n  GAME_STATE = \"GAME_STATE\",\n  GAME_SOUND_STATE = \"GAME_SOUND_STATE\",\n  GAME_TIMING_STATE = \"GAME_TIMING_STATE\",\n  GAME_OVERLAY_STATE = \"GAME_OVERLAY_STATE\",\n  SELECTED_POKEMONS = \"SELECTED_POKEMONS\",\n}\n\nexport enum GameStatus {\n  RUNNING = \"running\",\n  PENDING = \"pending\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\",\n}\n\nexport interface GameState {\n  status: GameStatus;\n  row: number;\n  col: number;\n  pokemons: Record<string, Pokemon>;\n  matrix: Pokemon[][];\n  level: GameLevel;\n}\n\nexport interface GameOverlayState {\n  connectingLinePoints: PointCoords[];\n}\n\nexport enum Direction {\n  LEFT = \"left\",\n  RIGHT = \"right\",\n  TOP = \"top\",\n  BOTTOM = \"bottom\",\n}\n\nexport enum PointType {\n  START = \"start\",\n  END = \"end\",\n  LINE = \"line\",\n}\n\nexport interface PointCoords {\n  rowIndex: number;\n  colIndex: number;\n  direction?: Direction;\n  type?: PointType;\n}\n\nexport interface PokemonCoords extends PointCoords {\n  nid?: string;\n}\n\nexport enum GameLevel {\n  LEVEL_1 = \"1\",\n  LEVEL_2 = \"2\",\n  LEVEL_3 = \"3\",\n  LEVEL_4 = \"4\",\n  LEVEL_5 = \"5\",\n  LEVEL_6 = \"6\",\n  LEVEL_7 = \"7\",\n  LEVEL_8 = \"8\",\n  LEVEL_9 = \"9\",\n  LEVEL_10 = \"10\",\n  LEVEL_11 = \"11\",\n  LEVEL_12 = \"12\",\n  LEVEL_13 = \"13\",\n  LEVEL_14 = \"MAX\",\n}\n\nexport type GameOptions = {\n  [key in GameLevel]: {\n    row: number;\n    col: number;\n  };\n};\n\nexport const gameOptions: GameOptions = {\n  [GameLevel.LEVEL_1]: {\n    row: 3,\n    col: 4,\n  },\n  [GameLevel.LEVEL_2]: {\n    row: 4,\n    col: 4,\n  },\n  [GameLevel.LEVEL_3]: {\n    row: 4,\n    col: 5,\n  },\n  [GameLevel.LEVEL_4]: {\n    row: 4,\n    col: 6,\n  },\n  [GameLevel.LEVEL_5]: {\n    row: 4,\n    col: 7,\n  },\n  [GameLevel.LEVEL_6]: {\n    row: 6,\n    col: 8,\n  },\n  [GameLevel.LEVEL_7]: {\n    row: 7,\n    col: 8,\n  },\n  [GameLevel.LEVEL_8]: {\n    row: 8,\n    col: 8,\n  },\n  [GameLevel.LEVEL_9]: {\n    row: 8,\n    col: 9,\n  },\n  [GameLevel.LEVEL_10]: {\n    row: 8,\n    col: 10,\n  },\n  [GameLevel.LEVEL_11]: {\n    row: 8,\n    col: 11,\n  },\n  [GameLevel.LEVEL_12]: {\n    row: 8,\n    col: 12,\n  },\n  [GameLevel.LEVEL_13]: {\n    row: 9,\n    col: 12,\n  },\n  [GameLevel.LEVEL_14]: {\n    row: 10,\n    col: 12,\n  },\n};\n\nexport const nextLevel = {\n  [GameLevel.LEVEL_1]: GameLevel.LEVEL_2,\n  [GameLevel.LEVEL_2]: GameLevel.LEVEL_3,\n  [GameLevel.LEVEL_3]: GameLevel.LEVEL_4,\n  [GameLevel.LEVEL_4]: GameLevel.LEVEL_5,\n  [GameLevel.LEVEL_5]: GameLevel.LEVEL_6,\n  [GameLevel.LEVEL_6]: GameLevel.LEVEL_7,\n  [GameLevel.LEVEL_7]: GameLevel.LEVEL_8,\n  [GameLevel.LEVEL_8]: GameLevel.LEVEL_9,\n  [GameLevel.LEVEL_9]: GameLevel.LEVEL_10,\n  [GameLevel.LEVEL_10]: GameLevel.LEVEL_11,\n  [GameLevel.LEVEL_11]: GameLevel.LEVEL_12,\n  [GameLevel.LEVEL_12]: GameLevel.LEVEL_13,\n  [GameLevel.LEVEL_13]: GameLevel.LEVEL_14,\n  [GameLevel.LEVEL_14]: GameLevel.LEVEL_14,\n};\n\nexport const BASE_START_TIME = 5;\nexport const BONUS_TIME = 2;\nexport const PENALTY_TIME = 5;\n","import { atom } from \"recoil\";\nimport { GameSound, GameTypeState } from \"../../types/game\";\n\nconst gameSoundState = atom<GameSound>({\n  key: GameTypeState.GAME_SOUND_STATE,\n  default: {\n    soundReady: false,\n    playOpenMenuSound: () => {},\n    playEnableSound: () => {},\n    playDisableSound: () => {},\n    playCompletedGameSound: () => {},\n    playFailedGameSound: () => {},\n    playBiteSound: () => {},\n    playRisingPopSound: () => {},\n    playFanfareSound: () => {},\n    playGlugSound: () => {},\n    playNearlyEndTimeSound: () => {},\n    playOffSound: () => {},\n    playOnSound: () => {},\n    playLevelUpSound: () => {},\n    playPopDownSound: () => {},\n    playPopUpOnSound: () => {},\n    playPopUpOffSound: () => {},\n    playYouWinSound: () => {},\n  },\n});\n\nexport default gameSoundState;\n","import { useState } from \"react\";\n\n// Hook\nexport default function useLocalStorage(key: string, initialValue: string) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    // the translations\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: {\n          English: \"English\",\n          Vietnamese: \"Vietnamese\",\n          Back: \"Back\",\n          Replay: \"Replay\",\n          Language: \"Language\",\n          Level: \"Level\",\n          Welcome: \"Welcome\",\n          Congratulations: \"Congratulations\",\n          \"The fastest is best\": \"The fastest is best\",\n          \"The longest is best\": \"The longest is best\",\n          \"Your score\": \"Your score\",\n          \"Your time\": \"Your time\",\n          \"Remaining time\": \"Remaining time\",\n          \"Top players\": \"Top players\",\n          \"Single player\": \"Single player\",\n          \"Multi player\": \"Multi player\",\n          \"Main menu\": \"Main menu\",\n          \"Speed mode\": \"Speed mode\",\n          \"Survival mode\": \"Survival mode\",\n          \"Coming soon...\": \"Coming soon...\",\n          \"Scroll down to play\": \"Scroll down to play\",\n          \"Scroll down to chat\": \"Scroll down to chat\",\n          \"Preparing resource...\": \"Preparing resource...\",\n          \"Please complete all levels as fast as you can\":\n            \"Please complete all levels as fast as you can\",\n          \"Try your best not to run out of time as long as possible.\":\n            \"Try your best not to run out of time as long as possible\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Your time will increase when you match a pair of pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Choosing the wrong pair will increase the time\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Choosing the wrong pair will decrease the time\",\n          \"Accept alphabet and digit only.\":\n            \"Accept alphabet, digits and space only.\",\n          \"Please enter your name\": \"Please enter your name\",\n          \"Enter your name here\": \"Enter your name here\",\n          \"Make your own ranking\": \"Make your own ranking\",\n          \"Make match\": \"Make match\",\n          \"Find random match\": \"Find random match\",\n          \"Enter your message here...\": \"Enter your message here...\",\n        },\n      },\n      vi: {\n        translation: {\n          English: \"Tiếng Anh\",\n          Vietnamese: \"Tiếng Việt\",\n          Back: \"Quay về\",\n          Replay: \"Chơi lại\",\n          Language: \"Ngôn ngữ\",\n          Level: \"Cấp độ\",\n          Welcome: \"Chào bạn\",\n          Congratulations: \"Xin chúc mừng\",\n          \"The fastest is best\": \"Hoàn thành càng sớm, thứ hạng càng cao\",\n          \"The longest is best\":\n            \"Kéo dài thời gian càng lâu, thứ hạng càng cao\",\n          \"Your score\": \"Điểm số của bạn\",\n          \"Your time\": \"Thời gian của bạn\",\n          \"Remaining time\": \"Thời gian còn lại\",\n          \"Top players\": \"Danh sách người chơi hàng đầu\",\n          \"Single player\": \"Cá nhân\",\n          \"Multi player\": \"Đối kháng\",\n          \"Main menu\": \"Màn hình chính\",\n          \"Speed mode\": \"Tốc độ\",\n          \"Survival mode\": \"Sinh tồn\",\n          \"Coming soon...\": \"Đang phát triển...\",\n          \"Preparing resource...\": \"Đang chuẩn bị...\",\n          \"Scroll down to play\": \"Lăn chuột xuống để chơi\",\n          \"Scroll down to chat\": \"Lăn chuột xuống để nhắn tin\",\n          \"Please complete all levels as fast as you can\":\n            \"Hãy hoàn thành tất cả cấp độ nhanh nhất có thể \",\n          \"Try your best not to run out of time as long as possible\":\n            \"Cố gắng hết sức để không hết thời gian lâu nhất có thể\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Thời gian của bạn sẽ tăng thêm khi chọn khớp một cặp pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Chọn sai cặp sẽ bị tăng thêm thời gian\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Chọn sai cặp sẽ bị giảm thời gian\",\n          \"Accept alphabet and digit only.\":\n            \"Chỉ chấp nhận chữ cái, chữ số và kí tự trắng.\",\n          \"Please enter your name\": \"Hãy nhập tên của bạn\",\n          \"Enter your name here\": \"Nhập tên bạn tại đây\",\n          \"Make your own ranking\": \"Tạo xếp hạng của bạn\",\n          \"Make match\": \"Tạo trận đấu\",\n          \"Find random match\": \"Tìm trận ngẫu nhiên\",\n          \"Enter your message here...\": \"Nhập tin nhắn tại đây...\",\n        },\n      },\n    },\n    lng: \"en\", // if you're using a language detector, do not define the lng option\n    fallbackLng: \"en\",\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport type ResponseData = Record<string, any> | null;\n\nexport interface Response {\n  success: boolean;\n  message: string;\n  data?: ResponseData;\n  error?: string;\n}\n\nexport interface ResponseError extends Response {\n  error?: string;\n}\n\nexport enum ResponseStatus {\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n  IDLE = \"idle\",\n  PENDING = \"pending\",\n}\n\n// Hook\nconst useAsync = <T extends Response, E = string>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<ResponseStatus>(ResponseStatus.IDLE);\n  const [value, setValue] = useState<T | ResponseData>(null);\n  const [error, setError] = useState<E | ResponseError | null>(null);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(ResponseStatus.PENDING);\n    setValue(null);\n    setError(null);\n    return asyncFunction()\n      .then((response: T) => {\n        if (response) {\n          setValue(response);\n        }\n        setStatus(ResponseStatus.SUCCESS);\n      })\n      .catch((error: ResponseError) => {\n        if (error) {\n          setError(error);\n        }\n        setStatus(ResponseStatus.ERROR);\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n  return { execute, status, value, error };\n};\n\nexport default useAsync;\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport i18n from \"../services/i18n\";\n\nconst SwitchLanguage = () => {\n  const { t } = useTranslation();\n  const { playOffSound } = useRecoilValue(gameSoundState);\n  const [_, setStorageValue] = useLocalStorage(\"language\", \"vi\");\n  const changeLanguage = (lng: \"en\" | \"vi\") => {\n    i18n.changeLanguage(lng);\n    setStorageValue(lng);\n    playOffSound();\n  };\n\n  return (\n    <h5 className=\"select-language\">\n      {t(\"Language\")}:{\" \"}\n      <strong onClick={() => changeLanguage(\"en\")}>{t(\"English\")}</strong> -{\" \"}\n      <strong onClick={() => changeLanguage(\"vi\")}>{t(\"Vietnamese\")}</strong>\n    </h5>\n  );\n};\n\nexport default SwitchLanguage;\n","import { atom } from \"recoil\";\nimport { PlayerState, GameTypeState } from \"../../types/game\";\n\nconst playerState = atom<PlayerState>({\n  key: GameTypeState.PLAYER_STATE,\n  default: {\n    rankingId: \"\",\n    playerName: \"\",\n    playerTiming: 0,\n  },\n});\n\nexport default playerState;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport playerState from \"../recoil/atoms/playerState\";\n\nconst MainPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { playerName } = useRecoilValue(playerState);\n\n  return (\n    <div className=\"main-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Main board</title>\n      </Helmet>\n      <nav className=\"navigation\">\n        <h3 className=\"text-center\">\n          {t(\"Welcome\")}, {playerName}\n        </h3>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound()}>\n            {t(\"Single player\")}\n          </button>\n        </Link>\n        <Link to={Routes.MULTI_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound()}>\n            {t(\"Multi player\")}\n          </button>\n        </Link>\n        <SwitchLanguage />\n      </nav>\n    </div>\n  );\n};\n\nexport default MainPage;\n","const BASE_API = \"https://pokemon-game.ldktech.com/api\";\n\nexport default BASE_API;\n","import { Response } from \"../hooks/useAsync\";\nimport { GameMode } from \"../types/game\";\nimport BASE_API from \"./CONSTANTS\";\n\nexport type TopPlayer = {\n  _id?: string;\n  timing?: number;\n  playerName: string;\n  mode: GameMode;\n  timestamp: number;\n};\n\nexport interface TopPlayersResponse extends Response {\n  data: TopPlayer[];\n}\n\nexport interface InsertedTopPlayerResponse extends Response {\n  data?: {\n    InsertedID: string;\n  };\n  id: string;\n}\n\nconst defaultFetchOptions: RequestInit = {\n  method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n  mode: \"cors\", // no-cors, *cors, same-origin\n  cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n  credentials: \"same-origin\", // include, *same-origin, omit\n  headers: {\n    \"Content-Type\": \"application/json\",\n    // 'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  redirect: \"follow\", // manual, *follow, error\n  referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n};\n\nconst getTopRanking = (mode: GameMode): Promise<TopPlayersResponse> => {\n  return fetch(`${BASE_API}/rankings?mode=${mode}`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst addNewRanking = (data: TopPlayer): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = { ...defaultFetchOptions, body: JSON.stringify(data) };\n  return fetch(`${BASE_API}/rankings`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst updateNewRanking = (\n  id: string,\n  data: TopPlayer\n): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = {\n    ...defaultFetchOptions,\n    method: \"PUT\",\n    body: JSON.stringify(data),\n  };\n  return fetch(`${BASE_API}/rankings/${id}`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getTopRanking, addNewRanking, updateNewRanking };\n","export function timeConvert(num: number) {\n  if (num <= 0) {\n    return \"00:00\";\n  }\n  const hours = Math.floor(num / 60);\n  const minutes = num % 60;\n  return (\n    hours.toString().padStart(2, \"0\") +\n    \":\" +\n    minutes.toString().padStart(2, \"0\")\n  );\n}\n\nexport function dateTimeFromTimestamp(timestamp: number) {\n  const dateObject = new Date(timestamp);\n\n  return dateObject.toLocaleString();\n}\n","import { FC, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  getTopRanking,\n  TopPlayer,\n  TopPlayersResponse,\n} from \"../../api/ranking\";\nimport useAsync, { Response, ResponseStatus } from \"../../hooks/useAsync\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport { dateTimeFromTimestamp, timeConvert } from \"../../utils/time\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport { GameMode } from \"../../types/game\";\n\ntype TopListProps = {\n  fetch: () => Promise<TopPlayersResponse>;\n  mode: GameMode;\n};\n\nconst TopList: FC<TopListProps> = ({ fetch, mode }) => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { status, value: topPlayersResponse, error } = useAsync(fetch, true);\n\n  return (\n    <>\n      {topPlayersResponse &&\n        topPlayersResponse.data === null &&\n        (mode === GameMode.SPEED_MODE ? (\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ) : (\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ))}\n      <ol className=\"rank-list\">\n        {status === ResponseStatus.SUCCESS &&\n          topPlayersResponse?.data?.map(\n            (player: TopPlayer, index: number) =>\n              player.timing && (\n                <li key={`id-${index}`}>\n                  {player.playerName} - {timeConvert(player.timing)} -{\" \"}\n                  {dateTimeFromTimestamp(player.timestamp)}\n                </li>\n              )\n          )}\n        {status === ResponseStatus.ERROR && error && (\n          <p className=\"has-error\">{error}</p>\n        )}\n      </ol>\n    </>\n  );\n};\n\nexport default TopList;\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { getTopRanking } from \"../api/ranking\";\nimport { GameMode } from \"../types/game\";\nimport TopList from \"./Rank/TopList\";\n\nconst RankBoard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"max-screen-container rank-board\">\n      <h1>{t(\"Top players\")}</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The longest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SURVIVAL_MODE)}\n            mode={GameMode.SURVIVAL_MODE}\n          />\n        </div>\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The fastest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SPEED_MODE)}\n            mode={GameMode.SPEED_MODE}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RankBoard, () => true);\n","import { atom } from \"recoil\";\nimport {\n  GameStatus,\n  GameState,\n  GameTypeState,\n  GameLevel,\n} from \"../../types/game\";\n\nconst gameState = atom<GameState>({\n  key: GameTypeState.GAME_STATE,\n  default: {\n    status: GameStatus.PENDING,\n    row: 3,\n    col: 4,\n    pokemons: {},\n    matrix: [],\n    level: GameLevel.LEVEL_1,\n  },\n});\n\nexport default gameState;\n","import { nanoid } from \"nanoid\";\nimport {\n  PointCoords,\n  Pokemon,\n  PokemonCoords,\n  Direction,\n  PointType,\n} from \"../types/game\";\n\nconst BASE_URL =\n  \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white\";\n\nexport let pokemonList: Pokemon[] = [\n  { id: \"poke-0\", matched: false, image: `${BASE_URL}/1.png` },\n  { id: \"poke-1\", matched: false, image: `${BASE_URL}/2.png` },\n  { id: \"poke-2\", matched: false, image: `${BASE_URL}/3.png` },\n  { id: \"poke-3\", matched: false, image: `${BASE_URL}/4.png` },\n  { id: \"poke-5\", matched: false, image: `${BASE_URL}/5.png` },\n  { id: \"poke-4\", matched: false, image: `${BASE_URL}/6.png` },\n  { id: \"poke-6\", matched: false, image: `${BASE_URL}/7.png` },\n  { id: \"poke-7\", matched: false, image: `${BASE_URL}/8.png` },\n  { id: \"poke-8\", matched: false, image: `${BASE_URL}/9.png` },\n  { id: \"poke-9\", matched: false, image: `${BASE_URL}/10.png` },\n  { id: \"poke-10\", matched: false, image: `${BASE_URL}/11.png` },\n  { id: \"poke-11\", matched: false, image: `${BASE_URL}/12.png` },\n  { id: \"poke-12\", matched: false, image: `${BASE_URL}/13.png` },\n  { id: \"poke-13\", matched: false, image: `${BASE_URL}/14.png` },\n  { id: \"poke-14\", matched: false, image: `${BASE_URL}/15.png` },\n  { id: \"poke-15\", matched: false, image: `${BASE_URL}/16.png` },\n  { id: \"poke-16\", matched: false, image: `${BASE_URL}/17.png` },\n  { id: \"poke-17\", matched: false, image: `${BASE_URL}/18.png` },\n  { id: \"poke-18\", matched: false, image: `${BASE_URL}/19.png` },\n  { id: \"poke-19\", matched: false, image: `${BASE_URL}/20.png` },\n  { id: \"poke-20\", matched: false, image: `${BASE_URL}/21.png` },\n  { id: \"poke-21\", matched: false, image: `${BASE_URL}/22.png` },\n  { id: \"poke-22\", matched: false, image: `${BASE_URL}/23.png` },\n  { id: \"poke-23\", matched: false, image: `${BASE_URL}/24.png` },\n  { id: \"poke-24\", matched: false, image: `${BASE_URL}/25.png` },\n  { id: \"poke-25\", matched: false, image: `${BASE_URL}/26.png` },\n  { id: \"poke-26\", matched: false, image: `${BASE_URL}/27.png` },\n  { id: \"poke-27\", matched: false, image: `${BASE_URL}/28.png` },\n  { id: \"poke-28\", matched: false, image: `${BASE_URL}/29.png` },\n  { id: \"poke-29\", matched: false, image: `${BASE_URL}/30.png` },\n  { id: \"poke-30\", matched: false, image: `${BASE_URL}/31.png` },\n  { id: \"poke-31\", matched: false, image: `${BASE_URL}/32.png` },\n  { id: \"poke-32\", matched: false, image: `${BASE_URL}/33.png` },\n  { id: \"poke-33\", matched: false, image: `${BASE_URL}/34.png` },\n  { id: \"poke-34\", matched: false, image: `${BASE_URL}/35.png` },\n  { id: \"poke-35\", matched: false, image: `${BASE_URL}/36.png` },\n  { id: \"poke-36\", matched: false, image: `${BASE_URL}/37.png` },\n  { id: \"poke-37\", matched: false, image: `${BASE_URL}/38.png` },\n  { id: \"poke-38\", matched: false, image: `${BASE_URL}/39.png` },\n  { id: \"poke-39\", matched: false, image: `${BASE_URL}/40.png` },\n];\n\nconst convertObjectToArrayList = <Model>(\n  objectList: Record<string, Model>\n): Model[] => {\n  const arrayList: Model[] = [];\n  Object.keys(objectList).map((key) => {\n    arrayList.push(objectList[key]);\n    return key;\n  });\n  return arrayList;\n};\n\nexport const shufflePokemonList = (nonShuffleList: Pokemon[]) => {\n  const shuffledPokemonList = nonShuffleList.sort(() => Math.random() - 0.5);\n  const shuffledlistPokemon: Record<string, Pokemon> = {};\n  shuffledPokemonList.map((pokemon) => {\n    const nid = nanoid();\n    shuffledlistPokemon[nid] = pokemon;\n    return pokemon;\n  });\n\n  return shuffledlistPokemon;\n};\n\nexport const reShufflePokemonList = (pokemonList: Record<string, Pokemon>) => {\n  const arrayPokemons = convertObjectToArrayList(pokemonList);\n\n  return shufflePokemonList(arrayPokemons);\n};\n\nexport const makeListPokemons = (row: number, col: number) => {\n  const clonePokemonList: Pokemon[] = pokemonList.sort(\n    () => Math.random() - 0.5\n  );\n  // pokemonList.map((pokemon) => {\n  //   clonePokemonList.push(pokemon);\n  //   return pokemon;\n  // });\n  const total = (row * col) / 4;\n  const slicePokemonList = clonePokemonList.slice(0, total);\n  const nonShufflePokemonList = [\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n  ];\n\n  return shufflePokemonList(nonShufflePokemonList);\n};\n\nexport const generatePokemonMatrix = (\n  pokemons: Record<string, Pokemon>,\n  rowSetting: number = 8,\n  colSetting: number = 10\n): { pokemonMatrix: Pokemon[][]; pokemons: Record<string, Pokemon> } => {\n  const newPokemons = { ...pokemons };\n  const totalCol = colSetting + 2;\n  const totalRow = rowSetting + 2;\n  const pokemonKeys = Object.keys(pokemons);\n  const pokemonMatrix: Pokemon[][] = [];\n\n  for (let row = 0; row < totalRow; row++) {\n    if (pokemonMatrix[row] === undefined) pokemonMatrix[row] = [];\n    for (let col = 0; col < totalCol; col++) {\n      if (\n        row === 0 ||\n        row === totalRow - 1 ||\n        col === 0 ||\n        col === totalCol - 1\n      ) {\n        const id = nanoid();\n        const borderPoint = { nid: id, id, matched: true };\n        pokemonMatrix[row].push(borderPoint);\n      } else {\n        const pokemonKey = pokemonKeys.pop();\n        if (pokemonKey) {\n          const pokemon = {\n            ...newPokemons[pokemonKey],\n            nid: pokemonKey,\n            row,\n            col,\n          };\n          newPokemons[pokemonKey] = {\n            ...newPokemons[pokemonKey],\n            rowIndex: row,\n            colIndex: col,\n          };\n          pokemonMatrix[row].push(pokemon);\n        }\n      }\n    }\n  }\n\n  return { pokemonMatrix, pokemons: newPokemons };\n};\n\nconst cloneMatrix = (matrix: Pokemon[][]) => {\n  const newMatrix = [];\n  const length = matrix.length;\n\n  for (let i = 0; i < length; i++) {\n    newMatrix[i] = matrix[i].slice();\n  }\n\n  return newMatrix;\n};\n\nexport const findPath = (\n  fromPoint: PointCoords,\n  toPoint: PointCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const matrixTotalRow = totalRow + 2;\n  const matrixTotalCol = totalCol + 2;\n  const tempMatrix = cloneMatrix(matrix);\n  const matrixPoints: boolean[][] = [];\n  const matrixTrackingPoints: (PointCoords | undefined)[][] = [];\n\n  for (let rowIndex = 0; rowIndex < matrixTotalRow; ++rowIndex) {\n    matrixPoints.push([]);\n    matrixTrackingPoints.push([]);\n    for (let colIndex = 0; colIndex < matrixTotalCol; ++colIndex) {\n      const pokemon = { ...tempMatrix[rowIndex][colIndex] };\n      matrixPoints[rowIndex].push(pokemon.matched);\n      matrixTrackingPoints[rowIndex].push(undefined);\n    }\n  }\n  const dRow: number[] = [-1, 0, 1, 0];\n  const dCol: number[] = [0, 1, 0, -1];\n  const queue = [];\n  queue.push(toPoint);\n  matrixTrackingPoints[toPoint.rowIndex][toPoint.colIndex] = {\n    rowIndex: -2,\n    colIndex: -2,\n  };\n\n  matrixPoints[fromPoint.rowIndex][fromPoint.colIndex] = true;\n  matrixPoints[toPoint.rowIndex][toPoint.colIndex] = true;\n\n  while (queue.length) {\n    const currentPoint = queue.shift();\n\n    if (currentPoint) {\n      if (\n        currentPoint?.rowIndex === fromPoint.rowIndex &&\n        currentPoint?.colIndex === fromPoint.colIndex\n      ) {\n        break;\n      }\n      for (let index = 0; index < 4; index++) {\n        let rowIndex: number = currentPoint.rowIndex + dRow[index];\n        let colIndex: number = currentPoint.colIndex + dCol[index];\n        while (\n          rowIndex >= 0 &&\n          rowIndex < matrixTotalRow &&\n          colIndex >= 0 &&\n          colIndex < matrixTotalCol &&\n          matrixPoints[rowIndex][colIndex] === true\n        ) {\n          if (matrixTrackingPoints[rowIndex][colIndex] === undefined) {\n            matrixTrackingPoints[rowIndex][colIndex] = currentPoint;\n            queue.push({ rowIndex, colIndex });\n          }\n          rowIndex += dRow[index];\n          colIndex += dCol[index];\n        }\n      }\n    }\n  }\n\n  const trackedPoints: PointCoords[] = [];\n  let trackPoint: PointCoords = { ...fromPoint };\n\n  if (matrixTrackingPoints[trackPoint.rowIndex][trackPoint.colIndex]) {\n    while (trackPoint.rowIndex !== -2 && trackPoint.colIndex !== -2) {\n      trackedPoints.push({\n        rowIndex: trackPoint.rowIndex,\n        colIndex: trackPoint.colIndex,\n      });\n      trackPoint = {\n        ...(matrixTrackingPoints[trackPoint.rowIndex][\n          trackPoint.colIndex\n        ] as PointCoords),\n      };\n    }\n  }\n\n  return trackedPoints;\n};\n\nexport const hasConnectLine = (\n  point1: PokemonCoords,\n  point2: PokemonCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const pathPoints = findPath(point1, point2, matrix, totalRow, totalCol);\n\n  return {\n    connected: pathPoints.length >= 2 && pathPoints.length <= 4,\n    pathPoints,\n  };\n};\n\nexport const checkPointInLine = (\n  connectingLinePoints: PointCoords[],\n  currentPosition: PointCoords\n) => {\n  const { rowIndex, colIndex } = currentPosition;\n\n  return connectingLinePoints.find(\n    (matchingLinePoint) =>\n      matchingLinePoint.rowIndex === rowIndex &&\n      matchingLinePoint.colIndex === colIndex\n  );\n};\n\nexport const drawPath = (\n  pathPoints: PointCoords[],\n  totalRow: number,\n  totalCol: number\n) => {\n  const limitRow = totalRow + 2;\n  const limitCol = totalCol + 2;\n  // console.log(pathPoints);\n  return pathPoints.reduce(\n    (newPathPoints, currentPoint, index, arrayPoints) => {\n      let type: PointType = PointType.LINE;\n      let direction: Direction | undefined = undefined;\n      const nextIndex = index + 1;\n      const prevIndex = index - 1;\n\n      if (arrayPoints[nextIndex] === undefined) {\n        type = PointType.END;\n      }\n\n      if (arrayPoints[prevIndex]) {\n        const prevPoint = arrayPoints[prevIndex];\n        if (prevPoint.rowIndex > currentPoint.rowIndex) {\n          direction = Direction.TOP;\n        } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n          direction = Direction.BOTTOM;\n        } else {\n          if (prevPoint.colIndex > currentPoint.colIndex) {\n            direction = Direction.LEFT;\n          } else if (prevPoint.colIndex < currentPoint.colIndex) {\n            direction = Direction.RIGHT;\n          } else {\n            if (prevPoint.rowIndex > currentPoint.rowIndex) {\n              direction = Direction.TOP;\n            } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n              direction = Direction.BOTTOM;\n            }\n          }\n        }\n\n        let extraPoint: PointCoords | undefined = {\n          ...currentPoint,\n          direction,\n          type: PointType.LINE,\n        };\n\n        // console.log(extraPoint);\n\n        do {\n          switch (extraPoint.direction) {\n            case Direction.BOTTOM:\n              extraPoint.rowIndex--;\n              if (extraPoint.rowIndex < 0) {\n                extraPoint = undefined;\n              }\n\n              break;\n\n            case Direction.TOP:\n              extraPoint.rowIndex++;\n              if (extraPoint.rowIndex >= limitRow) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.LEFT:\n              extraPoint.colIndex++;\n              if (extraPoint.colIndex >= limitCol) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.RIGHT:\n              extraPoint.colIndex--;\n              if (extraPoint.colIndex < 0) {\n                extraPoint = undefined;\n              }\n              break;\n\n            default:\n              break;\n          }\n          if (extraPoint === undefined) {\n            break;\n          }\n          if (\n            extraPoint.rowIndex === prevPoint.rowIndex &&\n            extraPoint.colIndex === prevPoint.colIndex\n          ) {\n            break;\n          }\n\n          newPathPoints.push({ ...extraPoint });\n        } while (extraPoint !== undefined);\n      } else {\n        type = PointType.START;\n      }\n      const newCurrentPoint = { ...currentPoint, direction, type };\n\n      newPathPoints.push(newCurrentPoint);\n\n      return newPathPoints;\n    },\n    [] as PointCoords[]\n  );\n};\n\nexport const checkConnectionSelectedPokemons = (\n  selectedPokemons: PokemonCoords[],\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  rowSetting: number,\n  colSetting: number\n) => {\n  const newPokemons = { ...pokemons };\n  const newSelectedPokemons = [...selectedPokemons];\n  const [selectedPokemon1, selectedPokemon2] = newSelectedPokemons;\n  let connectingLinePoints: PointCoords[] = [];\n  let newMatrix = [...matrix];\n\n  if (\n    selectedPokemon1?.nid &&\n    selectedPokemon2?.nid &&\n    pokemons[selectedPokemon1.nid].id === pokemons[selectedPokemon2.nid].id\n  ) {\n    const { connected, pathPoints } = hasConnectLine(\n      selectedPokemon1,\n      selectedPokemon2,\n      matrix,\n      rowSetting,\n      colSetting\n    );\n\n    if (connected) {\n      connectingLinePoints = drawPath(pathPoints, rowSetting, colSetting);\n\n      newPokemons[selectedPokemon1.nid] = {\n        ...newPokemons[selectedPokemon1.nid],\n        matched: true,\n      };\n      newPokemons[selectedPokemon2.nid] = {\n        ...newPokemons[selectedPokemon2.nid],\n        matched: true,\n      };\n      const { pokemonMatrix } = generatePokemonMatrix(\n        newPokemons,\n        rowSetting,\n        colSetting\n      );\n      newMatrix = pokemonMatrix;\n    } else {\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n\n    newSelectedPokemons.length = 0;\n  } else {\n    if (selectedPokemons.length === 2) {\n      newSelectedPokemons.length = 0;\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n  }\n\n  return {\n    newSelectedPokemons,\n    newMatrix,\n    newPokemons,\n    connectingLinePoints,\n  };\n};\n\nexport const checkCompletedLevel = (pokemons: Record<string, Pokemon>) => {\n  return (\n    Object.keys(pokemons).length &&\n    Object.entries(pokemons).findIndex(\n      ([_, pokemon]) => pokemon.matched === false\n    ) === -1\n  );\n};\n\nexport const hasAnyConnectLine = (\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  let foundConnectLine = false;\n  const entriesPokemons = Object.entries(pokemons);\n\n  while (entriesPokemons.length) {\n    const entryPokemon = entriesPokemons.pop();\n\n    if (entryPokemon === undefined) {\n      break;\n    }\n    const [nid, currentPokemon] = entryPokemon;\n\n    if (currentPokemon.matched === false) {\n      foundConnectLine = entriesPokemons.some(([nid, pokemon]) => {\n        if (currentPokemon.id === pokemon.id && pokemon.matched === false) {\n          const { connected } = hasConnectLine(\n            currentPokemon as PointCoords,\n            pokemon as PointCoords,\n            matrix,\n            totalRow,\n            totalCol\n          );\n\n          // if (connected) {\n          //   console.log(\n          //     \"debug thôi, đừng có xem\",\n          //     currentPokemon.rowIndex,\n          //     currentPokemon.colIndex,\n          //     pokemon.rowIndex,\n          //     pokemon.colIndex\n          //   );\n          // }\n\n          return connected;\n        }\n\n        return false;\n      });\n      if (foundConnectLine) {\n        break;\n      }\n    }\n  }\n\n  return foundConnectLine;\n};\n","import { atom } from \"recoil\";\nimport { GameOverlayState, GameTypeState } from \"../../types/game\";\n\nconst gameOverlayState = atom<GameOverlayState>({\n  key: GameTypeState.GAME_OVERLAY_STATE,\n  default: {\n    connectingLinePoints: [],\n  },\n});\n\nexport default gameOverlayState;\n","import { atom } from \"recoil\";\nimport { GameTypeState, PokemonCoords } from \"../../types/game\";\n\nconst selectedPokemonsState = atom<PokemonCoords[]>({\n  key: GameTypeState.SELECTED_POKEMONS,\n  default: [],\n});\n\nexport default selectedPokemonsState;\n","import { selector } from \"recoil\";\nimport { GameSelector, PokemonCoords } from \"../../types/game\";\nimport { checkConnectionSelectedPokemons } from \"../../utils/game\";\nimport gameState from \"../atoms/gameState\";\nimport gameOverlayState from \"../atoms/gameOverlayState\";\nimport selectedPokemonsState from \"../atoms/selectedPokemonsState\";\n\nconst selectedPokemonsSelector = selector({\n  key: GameSelector.SELECTED_POKEMONS_SELECTOR,\n  get: ({ get }) => {\n    const selectedPokemons = get(selectedPokemonsState);\n    return selectedPokemons;\n  },\n  set: ({ set, get }, newValue) => {\n    const { row, col, status, matrix, pokemons, level } = get(gameState);\n    const selectedPokemons = get(selectedPokemonsState);\n\n    const cloneSelectedPokemons = [...selectedPokemons];\n\n    cloneSelectedPokemons.push(newValue as PokemonCoords);\n\n    const {\n      connectingLinePoints,\n      newMatrix,\n      newPokemons,\n      newSelectedPokemons,\n    } = checkConnectionSelectedPokemons(\n      cloneSelectedPokemons,\n      pokemons,\n      matrix,\n      row,\n      col\n    );\n\n    if (connectingLinePoints.length >= 1) {\n      if (connectingLinePoints.length > 1) {\n        set(gameState, {\n          row,\n          col,\n          status,\n          level,\n          matrix: newMatrix,\n          pokemons: newPokemons,\n        });\n      }\n      set(gameOverlayState, {\n        connectingLinePoints,\n      });\n    }\n\n    set(selectedPokemonsState, newSelectedPokemons);\n  },\n});\n\nexport default selectedPokemonsSelector;\n","import { atom } from \"recoil\";\nimport { GameTypeState } from \"../../types/game\";\n\nconst gameTimingState = atom<{ timing: number; yourTiming?: number }>({\n  key: GameTypeState.GAME_TIMING_STATE,\n  default: {\n    timing: 0,\n    yourTiming: 0,\n  },\n});\n\nexport default gameTimingState;\n","import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useCallback } from \"react\";\nimport {\n  BASE_START_TIME,\n  GameLevel,\n  GameMode,\n  gameOptions,\n  GameStatus,\n} from \"../types/game\";\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\nimport gameTimingState from \"../recoil/atoms/gameTimingState\";\nimport { addNewRanking, TopPlayer, updateNewRanking } from \"../api/ranking\";\nimport playerState from \"../recoil/atoms/playerState\";\n\nexport function useGameActions(mode: GameMode) {\n  const setGame = useSetRecoilState(gameState);\n  const setPlayer = useSetRecoilState(playerState);\n  const setGameTiming = useSetRecoilState(gameTimingState);\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\n  const resetGameState = useResetRecoilState(gameState);\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\n  const { playBiteSound, playFanfareSound, playNearlyEndTimeSound } =\n    useRecoilValue(gameSoundState);\n\n  const selectPokemon = (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => {\n    playBiteSound();\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\n  };\n\n  const resetGame = () => {\n    resetGameState();\n    resetGameOverlayState();\n    resetSelectedPokemonsState();\n  };\n\n  const initGame = useCallback(\n    (level: GameLevel) => {\n      const { row, col } = gameOptions[level];\n      const pokemons = makeListPokemons(row, col);\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n        pokemons,\n        row,\n        col\n      );\n      setGame({\n        pokemons: newPokemons,\n        matrix: pokemonMatrix,\n        level,\n        row,\n        col,\n        status: GameStatus.RUNNING,\n      });\n      setPlayer((currentPlayer) => ({ ...currentPlayer, playerTiming: 0 }));\n    },\n    [setGame]\n  );\n\n  const replayGame = (playerName: string) => {\n    playFanfareSound();\n    initGame(GameLevel.LEVEL_1);\n    addNewRankingScore(mode, playerName);\n    if (mode === GameMode.SURVIVAL_MODE) {\n      setGameTiming({ timing: BASE_START_TIME, yourTiming: 0 });\n    }\n    if (mode === GameMode.SPEED_MODE) {\n      setGameTiming({ timing: 0 });\n    }\n  };\n\n  const endGame = () => {\n    if (mode === GameMode.SURVIVAL_MODE) {\n      playNearlyEndTimeSound();\n      setGame((prevGame) => ({\n        ...prevGame,\n        status: GameStatus.COMPLETED,\n      }));\n    }\n  };\n\n  const addNewRankingScore = (mode: GameMode, playerName: string) => {\n    const playerScore: TopPlayer = {\n      mode,\n      playerName,\n      timestamp: Date.now(),\n    };\n    addNewRanking(playerScore).then((response) => {\n      setPlayer((prevPlayer) => ({\n        ...prevPlayer,\n        rankingId: response.id,\n      }));\n    });\n  };\n\n  const updateNewRankingScore = (\n    id: string,\n    mode: GameMode,\n    playerName: string,\n    timing: number\n  ) => {\n    const playerScore: TopPlayer = {\n      mode,\n      playerName,\n      timing,\n      timestamp: Date.now(),\n    };\n    updateNewRanking(id, playerScore).then((response) => {\n      console.log(response);\n    });\n  };\n\n  return {\n    initGame,\n    replayGame,\n    endGame,\n    selectPokemon,\n    resetGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport RankBoard from \"../components/RankBoard\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useGameActions } from \"../hooks/useGameActions\";\nimport { useEffect } from \"react\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useRecoilValue } from \"recoil\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport { GameMode } from \"../types/game\";\n\nconst SinglePlayerPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { resetGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  useEffect(() => {\n    resetGame();\n  }, [resetGame]);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Single player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <RankBoard />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Single player\")}</h1>\n        </div>\n        <div>\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button onClick={() => playPopUpOnSound()}>\n              {t(\"Survival mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button onClick={() => playPopUpOnSound()}>\n              {t(\"Speed mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.MAIN_PAGE}>\n            <button onClick={() => playPopUpOnSound()}>{t(\"Back\")}</button>\n          </Link>\n        </div>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SinglePlayerPage;\n","export enum ChatTypeState {\n  MESSAGES_STATE = \"MESSAGES_STATE\",\n}\n\nexport type Message = {\n  channel: string;\n  content: string;\n};\n\nexport interface MessagesState {\n  messages: Message[];\n}\n","import { atom } from \"recoil\";\nimport { ChatTypeState, MessagesState } from \"../../types/chat\";\n\nconst messagesState = atom<MessagesState>({\n  key: ChatTypeState.MESSAGES_STATE,\n  default: {\n    messages: [],\n  },\n});\n\nexport default messagesState;\n","import { FC, memo } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { dateTimeFromTimestamp } from \"../../utils/time\";\n\ninterface MessageProps {\n  message: string;\n}\n\nconst Message: FC<MessageProps> = ({ message }) => {\n  const { playerName } = useRecoilValue(playerState);\n  try {\n    console.log(message);\n    const { name, content, timestamp } = JSON.parse(message);\n    const selfClass = playerName === name ? \"self\" : \"\";\n    return (\n      <div className={`message ${selfClass}`}>\n        <small className=\"message-name\">{name}</small>\n        <strong className=\"message-content\">{content}</strong>\n        <small className=\"message-date\">\n          <em>{dateTimeFromTimestamp(timestamp)}</em>\n        </small>\n      </div>\n    );\n  } catch {\n    return null;\n  }\n};\n\nfunction isOldMessage(prevProps: MessageProps, nextProps: MessageProps) {\n  return prevProps.message === nextProps.message;\n}\n\nexport default memo(Message, isOldMessage);\n","import { FC, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport { useRecoilValue } from \"recoil\";\nimport messagesState from \"../../recoil/atoms/messagesState\";\n\nconst MessagesBox: FC = () => {\n  const { messages } = useRecoilValue(messagesState);\n\n  useEffect(() => {\n    const messagesBox = document.getElementById(\"messages-box\");\n    if (messagesBox) {\n      messagesBox.scrollTo({\n        behavior: \"smooth\",\n        top: messagesBox.scrollHeight,\n      });\n    }\n  }, [messages.length]);\n\n  return (\n    <div id=\"messages-box\" className=\"messages-box\">\n      {messages.map(\n        (message, index) =>\n          message && <Message key={index} message={message.content} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagesBox;\n","import { FC, FormEventHandler, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport messagesState from \"../recoil/atoms/messagesState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport MessagesBox from \"./Chat/MessagesBox\";\n\ninterface ChatRoomProps {\n  room: string;\n}\n\nconst BASE_WS_URL = \"ws://pokemon-game.ldktech.com:8080\";\n\nconst ChatRoom: FC<ChatRoomProps> = ({ room }) => {\n  const { t } = useTranslation();\n  const { playerName } = useRecoilValue(playerState);\n  const setMessagesState = useSetRecoilState(messagesState);\n  const [socketUrl, setSocketUrl] = useState(\n    `${BASE_WS_URL}/chat?username=${playerName}`\n  );\n  const { sendJsonMessage, readyState, lastJsonMessage, lastMessage } =\n    useWebSocket(socketUrl);\n\n  useEffect(() => {\n    lastJsonMessage &&\n      setMessagesState(({ messages }) => ({\n        messages: [...messages, lastJsonMessage],\n      }));\n  }, [lastMessage]);\n\n  const handleClickSendMessage = useCallback((message) => {\n    const messageJson = {\n      command: 2,\n      channel: \"general\",\n      name: playerName,\n      content: message,\n      timestamp: Date.now(),\n    };\n    sendJsonMessage(messageJson);\n  }, []);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const inputMessage = event.currentTarget.message;\n    inputMessage.setAttribute(\"disabled\", \"true\");\n    const message = inputMessage.value.replace(\n      /\\b(dit|du|fuck|cu|dcm|dm|dcm)\\b/g,\n      \"*\"\n    );\n    if (message && message.trim() !== \"\") {\n      handleClickSendMessage(message);\n      inputMessage.value = \"\";\n    } else {\n      alert(t(\"Please enter your message\"));\n    }\n    inputMessage.removeAttribute(\"disabled\");\n    inputMessage.focus();\n  };\n\n  return (\n    <div className=\"chat-room\">\n      <div className=\"chat-container\">\n        {readyState === ReadyState.OPEN && (\n          <>\n            <MessagesBox />\n            <div className=\"chat-box\">\n              <form onSubmit={handleSubmit}>\n                <input\n                  name=\"message\"\n                  placeholder={t(\"Enter your message here...\")}\n                  autoFocus\n                />\n              </form>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n","import { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport ChatRoom from \"../components/ChatRoom\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { Routes } from \"../routes/CONSTANTS\";\n\nconst MultiPlayerPage = () => {\n  const { t } = useTranslation();\n\n  const { playPopUpOnSound, playGlugSound } = useRecoilValue(gameSoundState);\n\n  const showInDevelopment = () => {\n    playGlugSound();\n    alert(t(\"In development\"));\n  };\n\n  return (\n    <div className=\"chat-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Multi player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <ChatRoom room=\"general\" />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Multi player\")}</h1>\n        </div>\n        <div>\n          <div className=\"text-center\">\n            <p className=\"text-coming-soon\">{t(\"Coming soon...\")}</p>\n            <button onClick={showInDevelopment}>{t(\"Make match\")}</button>\n            <button onClick={showInDevelopment}>\n              {t(\"Find random match\")}\n            </button>\n            <Link to={Routes.MAIN_PAGE}>\n              <button onClick={() => playPopUpOnSound()}>\n                {t(\"Main menu\")}\n              </button>\n            </Link>\n          </div>\n        </div>\n        <p className=\"mobile-helper\">{t(\"Scroll down to chat\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default MultiPlayerPage;\n","import { FC, memo } from \"react\";\nimport { Pokemon } from \"../../types/game\";\n\ntype PokemonCardProps = {\n  pokemon: Pokemon;\n  rowIndex: number;\n  colIndex: number;\n  isSelected: number | boolean;\n  selectPokemon: (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => void;\n};\n\nconst PokemonCard: FC<PokemonCardProps> = ({\n  pokemon,\n  rowIndex,\n  colIndex,\n  isSelected,\n  selectPokemon,\n}) => {\n  const selected = isSelected ? \"selected\" : \"\";\n  const hidden = pokemon.matched ? \"hidden\" : \"\";\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${pokemon.image ?? \"\"})`,\n      }}\n      className={`pokemon-card ${selected} ${hidden}`}\n      onClick={() => {\n        if (!isSelected && !pokemon.matched && pokemon.nid) {\n          selectPokemon(pokemon.nid, rowIndex, colIndex);\n        }\n      }}\n    />\n  );\n};\n\nfunction propsAreEquals(\n  prevProps: PokemonCardProps,\n  nextProps: PokemonCardProps\n) {\n  return (\n    prevProps.pokemon.nid === nextProps.pokemon.nid &&\n    prevProps.pokemon.image === nextProps.pokemon.image &&\n    prevProps.pokemon.matched === nextProps.pokemon.matched &&\n    prevProps.isSelected === nextProps.isSelected\n  );\n}\n\nexport default memo(PokemonCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\n\nimport { GameMode, Pokemon } from \"../../types/game\";\nimport PokemonCard from \"./PokemonCard\";\n\ntype PokemonRowProps = {\n  pokemons: Pokemon[];\n  rowIndex: number;\n  mode: GameMode;\n};\n\nconst PokemonRow: FC<PokemonRowProps> = ({ pokemons, rowIndex, mode }) => {\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\n  const { selectPokemon } = useGameActions(mode);\n  return (\n    <>\n      {pokemons.map((pokemon, index) => (\n        <PokemonCard\n          key={`card-${index}`}\n          pokemon={pokemon}\n          rowIndex={rowIndex}\n          colIndex={index}\n          isSelected={\n            pokemon.nid !== undefined &&\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\n          }\n          selectPokemon={selectPokemon}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PokemonRow;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport gameTimingState from \"../recoil/atoms/gameTimingState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport {\n  BASE_START_TIME,\n  GameLevel,\n  GameMode,\n  GameStatus,\n  nextLevel,\n  Pokemon,\n} from \"../types/game\";\nimport {\n  generatePokemonMatrix,\n  checkCompletedLevel,\n  hasAnyConnectLine,\n  reShufflePokemonList,\n} from \"../utils/game\";\nimport { useGameActions } from \"./useGameActions\";\n\nexport default function useGameEngine(mode: GameMode) {\n  const location = useLocation();\n  const {\n    initGame,\n    replayGame,\n    endGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  } = useGameActions(mode);\n  const setGame = useSetRecoilState(gameState);\n  const currentPlayer = useRecoilValue(playerState);\n  const setGameTiming = useSetRecoilState(gameTimingState);\n  const {\n    playFanfareSound,\n    playLevelUpSound,\n    playCompletedGameSound,\n    playYouWinSound,\n  } = useRecoilValue(gameSoundState);\n  const { matrix, row, col, status, pokemons, level } =\n    useRecoilValue(gameState);\n\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\n    const newShufflePokemons = reShufflePokemonList(pokemons);\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n      newShufflePokemons,\n      row,\n      col\n    );\n    setGame({\n      pokemons: newPokemons,\n      matrix: pokemonMatrix,\n      level,\n      row,\n      col,\n      status: GameStatus.RUNNING,\n    });\n  };\n\n  // Setup game\n  useEffect(() => {\n    if (status === GameStatus.PENDING) {\n      playFanfareSound();\n      initGame(level);\n      addNewRankingScore(mode, currentPlayer.playerName);\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming({ timing: BASE_START_TIME, yourTiming: 0 });\n      }\n      if (mode === GameMode.SPEED_MODE) {\n        setGameTiming({ timing: 0 });\n      }\n    }\n    return () => {\n      // cleanup\n    };\n  }, [status, initGame]);\n\n  // Check game completed and post result\n  useEffect(() => {\n    if (status === GameStatus.COMPLETED) {\n      if (currentPlayer.rankingId) {\n        updateNewRankingScore(\n          currentPlayer.rankingId,\n          mode,\n          currentPlayer.playerName,\n          currentPlayer.playerTiming\n        );\n      }\n    }\n  }, [currentPlayer.rankingId, currentPlayer.playerTiming]);\n\n  // Check completed one level and re-start new one higher level\n  useEffect(() => {\n    if (checkCompletedLevel(pokemons)) {\n      const levelUp: GameLevel = nextLevel[level];\n      if (level !== levelUp || mode === GameMode.SURVIVAL_MODE) {\n        initGame(levelUp);\n        playCompletedGameSound();\n      } else {\n        if (mode === GameMode.SPEED_MODE) {\n          playYouWinSound();\n          setGame({\n            matrix,\n            row,\n            col,\n            pokemons,\n            level,\n            status: GameStatus.COMPLETED,\n          });\n        }\n      }\n    } else {\n      if (\n        Object.keys(pokemons).length &&\n        hasAnyConnectLine(pokemons, matrix, row, col) === false\n      ) {\n        shuffleMatrix(pokemons);\n        playLevelUpSound();\n      }\n    }\n  }, [pokemons]);\n\n  // Setup new game if access directly from browser\n  useEffect(() => {\n    if (status === GameStatus.RUNNING) {\n      playFanfareSound();\n      initGame(GameLevel.LEVEL_1);\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming({ timing: BASE_START_TIME, yourTiming: 0 });\n      }\n      if (mode === GameMode.SPEED_MODE) {\n        setGameTiming({ timing: 0 });\n      }\n    }\n  }, [location]);\n\n  return {\n    initGame,\n    replayGame,\n    endGame,\n    matrix,\n    row,\n    col,\n    status,\n    level,\n  };\n}\n","import PokemonRow from \"./Game/PokemonRow\";\nimport useGameEngine from \"../hooks/useGameEngine\";\nimport { GameMode } from \"../types/game\";\nimport { FC } from \"react\";\n\nconst GameBoard: FC<{ mode: GameMode }> = ({ mode }) => {\n  const { matrix, row, col } = useGameEngine(mode);\n\n  return (\n    <div className={`game-pokemon board-${row}x${col}`}>\n      {matrix &&\n        matrix.map((pokemons, index) => (\n          <PokemonRow\n            mode={mode}\n            key={`row-${index}`}\n            rowIndex={index}\n            pokemons={pokemons}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import { FC, memo, useEffect, useRef } from \"react\";\nimport { PointCoords } from \"../../types/game\";\n\ntype LineCardProps = {\n  point?: PointCoords;\n  rowIndex: number;\n  colIndex: number;\n};\n\nconst LineCard: FC<LineCardProps> = ({ point, rowIndex, colIndex }) => {\n  const type = point && point.type ? `${point.type}-point` : \"\";\n  const direction =\n    point && point.direction ? `${point.direction}-direction` : \"\";\n  const pointClass = point ? `in-line ${direction} ${type}` : \"\";\n  const lineRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    setTimeout(() => {\n      if (lineRef.current) {\n        direction && lineRef.current.classList.remove(direction);\n        type && lineRef.current.classList.remove(type);\n      }\n    }, 300);\n    return () => {};\n  }, [lineRef, direction, type]);\n\n  return (\n    <div ref={lineRef} className={`line-card ${pointClass}`}>\n      <strong>\n        {rowIndex},{colIndex}\n      </strong>\n    </div>\n  );\n};\n\nfunction propsAreEquals(prevProps: LineCardProps, nextProps: LineCardProps) {\n  if (prevProps.point === undefined && nextProps.point === undefined) {\n    return true;\n  }\n\n  return (\n    prevProps.point?.direction === nextProps.point?.direction &&\n    prevProps.point?.type === nextProps.point?.type\n  );\n}\n\nexport default memo(LineCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { PointCoords, Pokemon } from \"../../types/game\";\nimport { checkPointInLine } from \"../../utils/game\";\nimport LineCard from \"./LineCard\";\n\ntype LineRowProps = {\n  cards: Pokemon[] | number[];\n  rowIndex: number;\n  connectingLinePoints: PointCoords[];\n};\n\nconst LineRow: FC<LineRowProps> = ({\n  cards,\n  rowIndex,\n  connectingLinePoints,\n}) => {\n  return (\n    <>\n      {cards.map((_, colIndex) => (\n        <LineCard\n          key={`card-${colIndex}`}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          point={checkPointInLine(connectingLinePoints, { rowIndex, colIndex })}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default LineRow;\n","import { FC } from \"react\";\nimport LineRow from \"./Game/LineRow\";\nimport useGameOverlayEngine from \"../hooks/useGameOverlayEngine\";\nimport { GameMode } from \"../types/game\";\n\ntype GameOverlayProps = {\n  mode: GameMode;\n};\n\nconst GameOverlay: FC<GameOverlayProps> = ({ mode }) => {\n  const { connectingLinePoints, matrix, row, col } = useGameOverlayEngine(mode);\n\n  const columnCards = new Array(col + 2).fill(false);\n\n  return (\n    <div className={`game-overlay board-${row}x${col}`}>\n      {matrix &&\n        matrix.map((_, index) => (\n          <LineRow\n            key={`row-${index}`}\n            cards={columnCards}\n            rowIndex={index}\n            connectingLinePoints={connectingLinePoints}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameOverlay;\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport { useEffect } from \"react\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { BONUS_TIME, GameMode, PENALTY_TIME } from \"../types/game\";\nimport gameTimingState from \"../recoil/atoms/gameTimingState\";\n\nexport default function useGameOverlayEngine(mode: GameMode) {\n  const { connectingLinePoints } = useRecoilValue(gameOverlayState);\n  const { matrix, row, col, status } = useRecoilValue(gameState);\n  const { playRisingPopSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const setGameTiming = useSetRecoilState(gameTimingState);\n\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      playGlugSound();\n      if (mode === GameMode.SPEED_MODE) {\n        setGameTiming((gameTiming) => ({\n          timing: gameTiming.timing + PENALTY_TIME,\n        }));\n      }\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming((gameTiming) => ({\n          ...gameTiming,\n          timing: gameTiming.timing - PENALTY_TIME,\n        }));\n      }\n    }\n    if (connectingLinePoints.length > 1) {\n      playRisingPopSound();\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming((gameTiming) => ({\n          ...gameTiming,\n          timing: gameTiming.timing + BONUS_TIME,\n        }));\n      }\n    }\n  }, [connectingLinePoints]);\n\n  return {\n    connectingLinePoints,\n    matrix,\n    row,\n    col,\n    status,\n  };\n}\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport gameState from \"../../recoil/atoms/gameState\";\nimport gameTimingState from \"../../recoil/atoms/gameTimingState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { GameMode, GameStatus } from \"../../types/game\";\nimport { timeConvert } from \"../../utils/time\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\n\nconst GameSpeedInfo = () => {\n  const { t } = useTranslation();\n  const { level, status } = useRecoilValue(gameState);\n  const [gameTiming, setGameTiming] = useRecoilState(gameTimingState);\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const { timing } = gameTiming;\n  const { replayGame } = useGameActions(GameMode.SPEED_MODE);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.RUNNING) {\n      timeoutId = setTimeout(() => {\n        setGameTiming({\n          timing: timing + 1,\n        });\n      }, 1000);\n    }\n    if (status === GameStatus.COMPLETED) {\n      if (timeoutId) clearTimeout(timeoutId);\n      setPlayer({ ...currentPlayer, playerTiming: timing });\n    }\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [timing, status]);\n\n  return (\n    <div className=\"game-info\">\n      <h1 className=\"game-title\">\n        {status === GameStatus.COMPLETED\n          ? t(\"Congratulations\") + \" \" + currentPlayer.playerName\n          : t(\"Speed mode\")}\n      </h1>\n      <h3 className=\"game-title\">\n        {t(\"Level\")} {level} / 14\n      </h3>\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {timeConvert(timing)}\n      </p>\n      <p>\n        <button onClick={() => replayGame(currentPlayer.playerName)}>\n          {t(\"Replay\")}\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default GameSpeedInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport GameSpeedInfo from \"../components/Game/GameSpeedInfo\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SpeedModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Speed mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSpeedInfo />\n        <GameOverlay mode={GameMode.SPEED_MODE} />\n        <GameBoard mode={GameMode.SPEED_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSpeedInfo />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Please complete all levels as fast as you can\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will increase the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound()}>{t(\"Back\")}</button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SpeedModePage;\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport gameTimingState from \"../../recoil/atoms/gameTimingState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { GameMode, GameStatus } from \"../../types/game\";\nimport { timeConvert } from \"../../utils/time\";\n\nconst GameSurvivalInfo = () => {\n  const { t } = useTranslation();\n  const { level, status } = useRecoilValue(gameState);\n  const [gameTiming, setGameTiming] = useRecoilState(gameTimingState);\n  const { timing, yourTiming = 0 } = gameTiming;\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const { replayGame, endGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.RUNNING) {\n      if (timing <= 0) {\n        if (timeoutId) clearTimeout(timeoutId);\n        endGame();\n      } else {\n        timeoutId = setTimeout(() => {\n          setGameTiming({\n            yourTiming: yourTiming + 1,\n            timing: timing - 1,\n          });\n        }, 1000);\n      }\n    }\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [timing, status]);\n\n  useEffect(() => {\n    if (status === GameStatus.COMPLETED) {\n      setPlayer({ ...currentPlayer, playerTiming: yourTiming });\n    }\n  }, [status]);\n\n  return (\n    <div className=\"game-info\">\n      <h1 className=\"game-title\">\n        {status === GameStatus.COMPLETED\n          ? t(\"Congratulations\") + \" \" + currentPlayer.playerName\n          : t(\"Survival mode\")}\n      </h1>\n      <h3 className=\"game-title\">\n        {t(\"Level\")} {level} / 14\n      </h3>\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {yourTiming && timeConvert(yourTiming)}\n      </p>\n      <p className=\"text-center\">\n        {t(\"Remaining time\")}: {timeConvert(timing)}\n      </p>\n      <p>\n        <button onClick={() => replayGame(currentPlayer.playerName)}>\n          {t(\"Replay\")}\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default GameSurvivalInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport GameSurvivalInfo from \"../components/Game/GameSurvivalInfo\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SurvivalModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Survival mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSurvivalInfo />\n        <GameOverlay mode={GameMode.SURVIVAL_MODE} />\n        <GameBoard mode={GameMode.SURVIVAL_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSurvivalInfo />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Try your best not to run out of time as long as possible\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Your time will increase when you match a pair of pokemon\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will decrease the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound()}>{t(\"Back\")}</button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SurvivalModePage;\n","import { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useSetRecoilState } from \"recoil\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { FormEventHandler } from \"react\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { useHistory } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\n\nconst PlayerPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const setPlayer = useSetRecoilState(playerState);\n  const [_, setPlayerName] = useLocalStorage(\"playerName\", \"\");\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const playerName = event.currentTarget.playerName.value;\n    if (playerName && playerName.trim() !== \"\") {\n      if (playerName.match(/^[a-zA-Z0-9 ]*$/gim)) {\n        setPlayerName(playerName);\n        setPlayer({ playerName, playerTiming: 0 });\n        history.push(Routes.MAIN_PAGE);\n      } else {\n        alert(t(\"Accept alphabet and digit only.\"));\n      }\n    } else {\n      alert(t(\"Please enter your name\"));\n    }\n  };\n\n  return (\n    <div className=\"main-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Player board</title>\n      </Helmet>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n            name=\"playerName\"\n            autoFocus\n            placeholder={t(\"Enter your name here\")}\n            maxLength={20}\n          />\n        </form>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerPage;\n","import \"./App.css\";\nimport { Switch, Route, useHistory, useLocation } from \"react-router-dom\";\nimport MainPage from \"./pages/MainPage\";\nimport { Routes } from \"./routes/CONSTANTS\";\nimport SinglePlayerPage from \"./pages/SinglePlayerPage\";\nimport MultiPlayerPage from \"./pages/MultiPlayerPage\";\nimport SpeedModePage from \"./pages/SpeedModePage\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"./recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"./services/i18n\";\nimport { useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport SurvivalModePage from \"./pages/SurvivalModePage\";\nimport playerState from \"./recoil/atoms/playerState\";\nimport PlayerPage from \"./pages/PlayerPage\";\n\nfunction App() {\n  const { t } = useTranslation();\n  const { soundReady } = useRecoilValue(gameSoundState);\n  const history = useHistory();\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const [language] = useLocalStorage(\"language\", \"vi\");\n  const [prevPlayerName, setPlayerName] = useLocalStorage(\"playerName\", \"\");\n\n  useEffect(() => {\n    i18n.changeLanguage(language);\n  }, [language]);\n\n  useEffect(() => {\n    if (\n      prevPlayerName &&\n      prevPlayerName !== \"\" &&\n      prevPlayerName.match(/^[a-zA-Z0-9 ]*$/gim)\n    ) {\n      if (\n        currentPlayer.playerName.trim() !== \"\" &&\n        currentPlayer.playerName.match(/^[a-zA-Z0-9 ]*$/gim)\n      ) {\n        setPlayer({ playerName: currentPlayer.playerName, playerTiming: 0 });\n      } else {\n        setPlayer({ playerName: prevPlayerName, playerTiming: 0 });\n      }\n    } else {\n      setPlayerName(\"\");\n      history.push(Routes.PLAYER_PAGE);\n    }\n  }, [prevPlayerName]);\n\n  return (\n    <div className=\"app\">\n      {!soundReady && <h1>{t(\"Preparing resource...\")}</h1>}\n      {soundReady && (\n        <Switch>\n          <Route path={Routes.MAIN_PAGE} exact>\n            <MainPage />\n          </Route>\n          <Route path={Routes.SINGLE_PLAYER_PAGE} exact>\n            <SinglePlayerPage />\n          </Route>\n          <Route path={Routes.MULTI_PLAYER_PAGE} exact>\n            <MultiPlayerPage />\n          </Route>\n          <Route path={Routes.SPEED_MODE_PAGE} exact>\n            <SpeedModePage />\n          </Route>\n          <Route path={Routes.SURVIVAL_MODE_PAGE} exact>\n            <SurvivalModePage />\n          </Route>\n          <Route path={Routes.PLAYER_PAGE} exact>\n            <PlayerPage />\n          </Route>\n          <Route path=\"*\">\n            <MainPage />\n          </Route>\n        </Switch>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import useSound from \"use-sound\";\nimport { SpriteMap } from \"use-sound/dist/types\";\n\nimport menuOpenSound from \"../assets/sound/menu-open.mp3\";\nimport disableSound from \"../assets/sound/disable-sound.mp3\";\nimport enableSound from \"../assets/sound/enable-sound.mp3\";\nimport onSound from \"../assets/sound/switch-on.mp3\";\nimport offSound from \"../assets/sound/switch-off.mp3\";\nimport biteSound from \"../assets/sound/bite.mp3\";\nimport fanfareSound from \"../assets/sound/fanfare.mp3\";\nimport glugSound from \"../assets/sound/glug-a.mp3\";\nimport risingPopSound from \"../assets/sound/rising-pops.mp3\";\nimport completeGameSound from \"../assets/sound/game-completion.wav\";\nimport failedGameSound from \"../assets/sound/gamers-fail-game.mp3\";\nimport nearlyEndTimeSound from \"../assets/sound/time-limited.wav\";\nimport levelUpSound from \"../assets/sound/levelup.mp3\";\nimport popDownSound from \"../assets/sound/pop-down.mp3\";\nimport popUpOnSound from \"../assets/sound/pop-up-on.mp3\";\nimport popUpOffSound from \"../assets/sound/pop-up-off.mp3\";\nimport youWinSound from \"../assets/sound/you-win.mp3\";\n\nexport enum Sound {\n  MENU_OPEN = \"MENU_OPEN\",\n  BITE = \"BITE\",\n  DISABLE = \"DISABLE\",\n  ENABLE = \"ENABLE\",\n  ON = \"ON\",\n  OFF = \"OFF\",\n  FANFARE = \"FANFARE\",\n  GLUG = \"GLUG\",\n  RISING_POP = \"RISING_POP\",\n  COMPLETE_GAME = \"COMPLETE_GAME\",\n  FAIL_GAME = \"FAIL_GAME\",\n  NEARLY_END_TIME = \"NEARLY_END_TIME\",\n  LEVEL_UP = \"LEVEL_UP\",\n  POP_DOWN = \"POP_DOWN\",\n  POP_UP_ON = \"POP_UP_ON\",\n  POP_UP_OFF = \"POP_UP_OFF\",\n  YOU_WIN = \"YOU_WIN\",\n}\n\ninterface SoundOptions {\n  id?: string;\n  volume?: number;\n  playbackRate?: number;\n  interrupt?: boolean;\n  soundEnabled?: boolean;\n  sprite?: SpriteMap;\n  onload?: () => void;\n}\n\nexport default function usePlaySound(sound?: Sound) {\n  const defaultConfigSound: SoundOptions = {\n    interrupt: true,\n    // volume: 1,\n  };\n  let soundPath = menuOpenSound;\n  if (sound) {\n    switch (sound) {\n      case Sound.BITE:\n        soundPath = biteSound;\n        break;\n      case Sound.COMPLETE_GAME:\n        soundPath = completeGameSound;\n        break;\n      case Sound.DISABLE:\n        soundPath = disableSound;\n        break;\n      case Sound.ENABLE:\n        soundPath = enableSound;\n        break;\n      case Sound.ON:\n        soundPath = onSound;\n        break;\n      case Sound.OFF:\n        soundPath = offSound;\n        break;\n      case Sound.FAIL_GAME:\n        soundPath = failedGameSound;\n        break;\n      case Sound.GLUG:\n        soundPath = glugSound;\n        break;\n      case Sound.FANFARE:\n        soundPath = fanfareSound;\n        break;\n      case Sound.RISING_POP:\n        soundPath = risingPopSound;\n        break;\n      case Sound.NEARLY_END_TIME:\n        soundPath = nearlyEndTimeSound;\n        break;\n      case Sound.LEVEL_UP:\n        soundPath = levelUpSound;\n        break;\n      case Sound.POP_DOWN:\n        soundPath = popDownSound;\n        break;\n      case Sound.POP_UP_ON:\n        soundPath = popUpOnSound;\n        break;\n      case Sound.POP_UP_OFF:\n        soundPath = popUpOffSound;\n        break;\n      case Sound.YOU_WIN:\n        soundPath = youWinSound;\n        break;\n      default:\n        soundPath = menuOpenSound;\n        break;\n    }\n  }\n\n  const [\n    play,\n    { sound: loadedSound, stop: stopSound, pause: pauseSound, duration },\n  ] = useSound(soundPath, defaultConfigSound);\n\n  return {\n    playSound: play,\n    loadedSound,\n    stopSound,\n    pauseSound,\n    duration,\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/menu-open.019cf647.mp3\";","export default __webpack_public_path__ + \"static/media/disable-sound.477d0574.mp3\";","export default __webpack_public_path__ + \"static/media/enable-sound.00d0be95.mp3\";","export default __webpack_public_path__ + \"static/media/switch-on.88d10ee7.mp3\";","export default __webpack_public_path__ + \"static/media/switch-off.e5ebe933.mp3\";","export default __webpack_public_path__ + \"static/media/bite.aea7caff.mp3\";","export default __webpack_public_path__ + \"static/media/fanfare.8807360a.mp3\";","export default __webpack_public_path__ + \"static/media/glug-a.b9f1fa99.mp3\";","export default __webpack_public_path__ + \"static/media/rising-pops.7eda816b.mp3\";","export default __webpack_public_path__ + \"static/media/game-completion.a7022fca.wav\";","export default __webpack_public_path__ + \"static/media/gamers-fail-game.1bab0c1d.mp3\";","export default __webpack_public_path__ + \"static/media/time-limited.3894918f.wav\";","export default __webpack_public_path__ + \"static/media/levelup.3dc0430f.mp3\";","export default __webpack_public_path__ + \"static/media/pop-down.cc0a5518.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-on.b776a1ef.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-off.83c6ba5b.mp3\";","export default __webpack_public_path__ + \"static/media/you-win.70d95733.mp3\";","import { FC, useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../hooks/usePlaySound\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\n\nconst SoundProvider: FC = ({ children }) => {\n  const { playSound: playOpenMenuSound, loadedSound: loadedOpenMenuSound } =\n    usePlaySound();\n  const {\n    playSound: playCompletedGameSound,\n    loadedSound: loadedCompletedGameSound,\n  } = usePlaySound(Sound.COMPLETE_GAME);\n  const { playSound: playFailedGameSound, loadedSound: loadedFailedGameSound } =\n    usePlaySound(Sound.FAIL_GAME);\n  const { playSound: playBiteSound, loadedSound: loadedBiteSound } =\n    usePlaySound(Sound.BITE);\n  const { playSound: playDisableSound, loadedSound: loadedDisableSound } =\n    usePlaySound(Sound.DISABLE);\n  const { playSound: playEnableSound, loadedSound: loadedEnableSound } =\n    usePlaySound(Sound.ENABLE);\n  const { playSound: playOnSound, loadedSound: loadedOnSound } = usePlaySound(\n    Sound.ON\n  );\n  const { playSound: playOffSound, loadedSound: loadedOffSound } = usePlaySound(\n    Sound.OFF\n  );\n  const { playSound: playFanfareSound, loadedSound: loadedFanfareSound } =\n    usePlaySound(Sound.FANFARE);\n  const { playSound: playGlugSound, loadedSound: loadedGlugSound } =\n    usePlaySound(Sound.GLUG);\n  const {\n    playSound: playNearlyEndTimeSound,\n    loadedSound: loadedNearlyEndTimeSound,\n  } = usePlaySound(Sound.NEARLY_END_TIME);\n  const { playSound: playRisingPopSound, loadedSound: loadedRisingPopSound } =\n    usePlaySound(Sound.RISING_POP);\n  const { playSound: playPopDownSound, loadedSound: loadedPopDownSound } =\n    usePlaySound(Sound.POP_DOWN);\n  const { playSound: playPopUpOnSound, loadedSound: loadedPopUpOnSound } =\n    usePlaySound(Sound.POP_UP_OFF);\n  const { playSound: playPopUpOffSound, loadedSound: loadedPopUpOffSound } =\n    usePlaySound(Sound.POP_UP_ON);\n  const { playSound: playLevelUpSound, loadedSound: loadedLevelUpSound } =\n    usePlaySound(Sound.LEVEL_UP);\n  const { playSound: playYouWinSound, loadedSound: loadedYouWinSound } =\n    usePlaySound(Sound.YOU_WIN);\n  const setSounds = useSetRecoilState(gameSoundState);\n\n  useEffect(() => {\n    if (\n      loadedDisableSound !== null &&\n      loadedEnableSound !== null &&\n      loadedFanfareSound !== null &&\n      loadedNearlyEndTimeSound !== null &&\n      loadedOpenMenuSound !== null &&\n      loadedOnSound !== null &&\n      loadedOffSound !== null &&\n      loadedGlugSound !== null &&\n      loadedRisingPopSound !== null &&\n      loadedCompletedGameSound !== null &&\n      loadedFailedGameSound !== null &&\n      loadedPopDownSound !== null &&\n      loadedPopUpOnSound !== null &&\n      loadedPopUpOffSound !== null &&\n      loadedLevelUpSound !== null &&\n      loadedYouWinSound !== null &&\n      loadedBiteSound !== null\n    ) {\n      setTimeout(() => {\n        setSounds({\n          playFanfareSound,\n          playGlugSound,\n          playBiteSound,\n          playCompletedGameSound,\n          playDisableSound,\n          playEnableSound,\n          playFailedGameSound,\n          playRisingPopSound,\n          playOpenMenuSound,\n          playOnSound,\n          playOffSound,\n          playNearlyEndTimeSound,\n          playPopUpOnSound,\n          playPopUpOffSound,\n          playLevelUpSound,\n          playPopDownSound,\n          playYouWinSound,\n          soundReady: true,\n        });\n      }, 1000);\n    }\n  }, [\n    loadedFanfareSound,\n    loadedGlugSound,\n    loadedBiteSound,\n    loadedCompletedGameSound,\n    loadedDisableSound,\n    loadedEnableSound,\n    loadedFailedGameSound,\n    loadedRisingPopSound,\n    loadedOpenMenuSound,\n    loadedOnSound,\n    loadedOffSound,\n    loadedNearlyEndTimeSound,\n    loadedPopUpOnSound,\n    loadedPopUpOffSound,\n    loadedLevelUpSound,\n    loadedPopDownSound,\n    loadedYouWinSound,\n  ]);\n\n  return <>{children}</>;\n};\n\nexport default SoundProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport SoundProvider from \"./components/SoundProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <SoundProvider>\n        <Router>\n          <App />\n        </Router>\n      </SoundProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}